# -*- coding: utf-8 -*-
"""Generated by ArcGIS ModelBuilder on: 2020-01-28 08:51:56
All ModelBuilder functionality may not be exported. Edits may be required for equivalency with the original model.
"""

import arcpy
import os, time, datetime

"""
========================================================================
LandSearch_Add_GridID.py
========================================================================
Author: Joe Touzel
========================================================================
Date			Modifier	Description of Change
2020/01/28  	JT			Published
========================================================================
Description:
This script is designed to update a part of the Land Search System. This
part will create the GridID field in the parcel layer. This field is 
based on a square mile fishnet grid that surrounds the county we're 
analysing.

Inputs:
- County boundary
- Fishnet grid Cell size
- Parcel layer for the county
- Unique field ID attribute
- temp output geodatabase for data we don't need to keep
- finalized data output geodatabase for the data we want to keep
"""


# To allow overwriting the outputs change the overwrite option to true.
arcpy.env.overwriteOutput = True

# Script parameters
county = arcpy.GetParameterAsText(0) # this can be derived from the county boundary
Cell_Size_Height = arcpy.GetParameterAsText(1) or "5280" # We'll create a fishnet with 1 sq mile cells
Cell_Size_Width = arcpy.GetParameterAsText(2) or "5280" # We'll create a fishnet with 1 sq mile cells
Input_Parcels = arcpy.GetParameterAsText(3) # Get the parcel data to be processed
Parcel_FID = arcpy.GetParameterAsText(4) #
Output_Join_Field = arcpy.GetParameterAsText(6) #
FinalData_OutputGeodatabase = arcpy.GetParameterAsText(7) # This is where all of our finalized output will be stored
TempOutput_Geodatabase = arcpy.GetParameterAsText(8) # This is where all of our temporary output will be stored
Output_CoordinateSystem = arcpy.GetParameterAsText(9) # choose a coordinate system

# REMOVE AFTER TESTING IS COMPLETE
county = r"R:\resgis\dropboxgis\Land Prospecting\Land Search\TX\HUC12070205_PRJ102353_San Gabriel_InFill\PRO\LSS_ParcelTemplate.gdb\WilliamsonCounty" # this can be derived from the county boundary
Cell_Size_Height = "1609.34" # We'll create a fishnet with 1 sq mile cells
Cell_Size_Width = "1609.34" # We'll create a fishnet with 1 sq mile cells
Input_Parcels = arcpy.GetParameterAsText(3) # Get the parcel data to be processed
Parcel_FID = arcpy.GetParameterAsText(4) #
Output_Join_Field = arcpy.GetParameterAsText(6) #
FinalData_OutputGeodatabase = r"R:\resgis\dropboxgis\Land Prospecting\Land Search\TX\HUC12070205_PRJ102353_San Gabriel_InFill\PRO\LSS_ParcelTemplate.gdb" # This is where all of our finalized output will be stored
TempOutput_Geodatabase = arcpy.GetParameterAsText(8)
Output_CoordinateSystem = r"C:\Users\jtouzel\AppData\Roaming\Esri\Desktop10.6\ArcMap\Coordinate Systems\NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet.prj"

# Write to Log
arcpy.AddMessage('')
arcpy.AddMessage("===================================================================")
sVersionInfo = 'LandSearch_Add_GridID.py, v20200128'
arcpy.AddMessage('Calculating GridID for Land Search Parcels, {}'.format(sVersionInfo))
arcpy.AddMessage("")
arcpy.AddMessage("Support: jtouzel@res.us, 281-715-9109")
arcpy.AddMessage("")
arcpy.AddMessage("Input FCs: {0}, {1}".format(county, Input_Parcels))
field_names = [f.name for f in arcpy.ListFields(Input_Parcels)]
arcpy.AddMessage("Field Names: {}".format(", ".join(field_names)))
arcpy.AddMessage("===================================================================")


#Create the grid from the county boundary
dateTag = datetime.datetime.today().strftime('%Y%m%d') #we'll tag our output with this. looks somethin like this 20181213
fishnetFileName = "FishnetGrid_" + dateTag # create a filename for the fishnet grid
CountyDesc = arcpy.Describe(county)
##Project the County boundary
arcpy.env.outputCoordinateSystem = Output_CoordinateSystem
arcpy.CreateFishnet_management(out_feature_class=os.path.join(FinalData_OutputGeodatabase, fishnetFileName),
                               origin_coord=str(CountyDesc.extent.lowerLeft),
                               y_axis_coord=str(CountyDesc.extent.XMin) + " " + str(CountyDesc.extent.YMax),
                               cell_width=Cell_Size_Width,
                               cell_height=Cell_Size_Height,
                               number_rows="", number_columns="",
                               corner_coord=str(CountyDesc.extent.upperRight), labels="NO_LABELS",
                               template=county, geometry_type="POLYGON")


