# -*- coding: utf-8 -*-
"""Generated by ArcGIS ModelBuilder on: 2020-01-28 08:51:56
All ModelBuilder functionality may not be exported. Edits may be required for equivalency with the original model.
"""

import arcpy
import os, time, datetime

"""
========================================================================
LandSearch_Add_GridID.py
========================================================================
Author: Joe Touzel
========================================================================
Date			Modifier	Description of Change
2020/01/28  	JT			Published
========================================================================
Description:
This script is designed to update a part of the Land Search System. This
part will create the GridID field in the parcel layer. This field is 
based on a square mile fishnet grid that surrounds the county we're 
analysing.

Inputs:
- County boundary
- Fishnet grid Cell size
- Parcel layer for the county
- Unique field ID attribute
- temp output geodatabase for data we don't need to keep
- finalized data output geodatabase for the data we want to keep
"""


# To allow overwriting the outputs change the overwrite option to true.
arcpy.env.overwriteOutput = True

# Script parameters
County = arcpy.GetParameterAsText(0) # this can be derived from the county boundary
Cell_Size_Height = arcpy.GetParameterAsText(1) or "5280" # We'll create a fishnet with 1 sq mile cells
Cell_Size_Width = arcpy.GetParameterAsText(2) or "5280" # We'll create a fishnet with 1 sq mile cells
Input_Parcels = arcpy.GetParameterAsText(3) # Get the parcel data to be processed
FinalData_OutputGeodatabase = arcpy.GetParameterAsText(7) # This is where all of our finalized output will be stored
TempOutput_Geodatabase = arcpy.GetParameterAsText(8) # This is where all of our temporary output will be stored
Output_CoordinateSystem = arcpy.GetParameterAsText(9) # choose a state plane coordinate system

# REMOVE AFTER TESTING IS COMPLETE
County = r"C:\Users\jtouzel\Desktop\TEMP\PRO_DEFAULT_GDB\Pro_Default.gdb\WilliamsonCounty" # this can be derived from the county boundary
Cell_Size_Height = "5280" # We'll create a fishnet with 1 sq mile cells
Cell_Size_Width = "5280" # We'll create a fishnet with 1 sq mile cells
Input_Parcels = r"C:\Users\jtouzel\Desktop\TEMP\PRO_DEFAULT_GDB\Pro_Default.gdb\stratmap19_landparcels_48491_williamson_201905" # Get the parcel data to be processed
FinalData_OutputGeodatabase = r"C:\Users\jtouzel\Desktop\TEMP\PRO_DEFAULT_GDB\Pro_Default.gdb" # This is where all of our finalized output will be stored
TempOutput_Geodatabase = arcpy.GetParameterAsText(8)
Output_CoordinateSystem = r"C:\Users\jtouzel\AppData\Roaming\Esri\Desktop10.6\ArcMap\Coordinate Systems\NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet.prj"

# Write to Log
arcpy.AddMessage('')
arcpy.AddMessage("===================================================================")
sVersionInfo = 'LandSearch_Add_GridID.py, v20200128'
arcpy.AddMessage('Calculating GridID for Land Search Parcels, {}'.format(sVersionInfo))
arcpy.AddMessage("")
arcpy.AddMessage("Support: jtouzel@res.us, 281-715-9109")
arcpy.AddMessage("")
arcpy.AddMessage("Input FCs: {0}, {1}".format(County, Input_Parcels))
field_names = [f.name for f in arcpy.ListFields(Input_Parcels)]
arcpy.AddMessage("Field Names: {}".format(", ".join(field_names)))
arcpy.AddMessage("===================================================================")


#Reproject all incoming data
arcpy.AddMessage('Reprojecting input County, {}'.format(os.path.basename(os.path.normpath(County))))
arcpy.env.workspace = FinalData_OutputGeodatabase
CountyProj = os.path.basename(os.path.normpath(County)) + "_Proj"
arcpy.AddMessage('Output is: {}'.format(CountyProj))
arcpy.Project_management(County, CountyProj, Output_CoordinateSystem)
arcpy.AddMessage('Reprojecting input Parcels, {}'.format(os.path.basename(os.path.normpath(Input_Parcels))))
ParcelProj = os.path.basename(os.path.normpath(Input_Parcels)) + "_Proj"
arcpy.Project_management(Input_Parcels, ParcelProj, Output_CoordinateSystem)
arcpy.AddMessage('Output is: {}'.format(ParcelProj))

#Create the grid from the county boundary
dateTag = datetime.datetime.today().strftime('%Y%m%d') # we'll tag our output with this. looks somethin like this 20181213
fishnetFileName = "FishnetGrid_" + dateTag # create a filename for the fishnet grid
CountyProjDesc = arcpy.Describe(CountyProj) # get the details of the county data
arcpy.CreateFishnet_management(out_feature_class=os.path.join(FinalData_OutputGeodatabase, fishnetFileName),
                               origin_coord=str(CountyProjDesc.extent.lowerLeft),
                               y_axis_coord=str(CountyProjDesc.extent.XMin) + " " + str(CountyProjDesc.extent.YMax),
                               cell_width=Cell_Size_Width,
                               cell_height=Cell_Size_Height,
                               number_rows="", number_columns="",
                               corner_coord=str(CountyProjDesc.extent.upperRight), labels="NO_LABELS",
                               template=CountyProj, geometry_type="POLYGON")
##add a field to the fishnet grid called GRID_FID
Grid_FID = "Grid_FID"
arcpy.AddField_management(in_table=fishnetFileName, field_name=Grid_FID, field_type="LONG", field_precision="",
                          field_scale="", field_length="", field_alias="", field_is_nullable="NULLABLE",
                          field_is_required="NON_REQUIRED", field_domain="")
###Calculate FID field as a copy of the OID field
oidFieldName = arcpy.Describe(fishnetFileName).OIDFieldName
arcpy.CalculateField_management(in_table=fishnetFileName, field=Grid_FID, expression="!" + oidFieldName + "!",
                                expression_type="PYTHON3", code_block="")
#Add an FID field to the parcel layer
FID_FieldName_1 = "FID_v1"
arcpy.AddField_management(in_table=ParcelProj, field_name=FID_FieldName_1, field_type="LONG", field_precision="",
                          field_scale="", field_length="", field_alias="", field_is_nullable="NULLABLE",
                          field_is_required="NON_REQUIRED", field_domain="")
##Calculate FID field as a copy of the OID field
oidFieldName = arcpy.Describe(ParcelProj).OIDFieldName
arcpy.CalculateField_management(in_table=ParcelProj, field=FID_FieldName_1, expression="!" + oidFieldName + "!",
                                expression_type="PYTHON3", code_block="")
##Add a Grid_ID field and an ACRES field
GridID_FieldName = "GRID_ID"
Acres_FieldName = "ACRES_v1"
arcpy.AddField_management(in_table=ParcelProj, field_name=GridID_FieldName, field_type="LONG", field_precision="",
                          field_scale="", field_length="", field_alias="", field_is_nullable="NULLABLE",
                          field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=ParcelProj, field_name=Acres_FieldName, field_type="DOUBLE", field_precision="",
                          field_scale="", field_length="", field_alias="", field_is_nullable="NULLABLE",
                          field_is_required="NON_REQUIRED", field_domain="")
###Calculate acreage
arcpy.CalculateField_management(in_table=ParcelProj, field=Acres_FieldName, expression="!shape.area@acres!",
                                expression_type="PYTHON3", code_block="")
#run a spatial join on the parcel data and the grid layer so we can add a Grid ID to the parcel layer
ParcelGridJoin = "ParcelGridJoin_" + dateTag
arcpy.SpatialJoin_analysis(target_features=ParcelProj, join_features=fishnetFileName, out_feature_class=ParcelGridJoin,
                           join_operation="JOIN_ONE_TO_ONE", join_type="KEEP_ALL", match_option='HAVE_THEIR_CENTER_IN')
#join the parcel data and the parcel grid join so we can calculate the GRID_ID field
ParcelFeatureLayer = "ParcelFeatureLayer_" + dateTag
arcpy.MakeFeatureLayer_management(ParcelProj, ParcelFeatureLayer)
arcpy.AddJoin_management(in_layer_or_view=ParcelFeatureLayer, in_field=FID_FieldName_1, join_table=ParcelGridJoin,
                         join_field=FID_FieldName_1, join_type="KEEP_ALL")
CalcField = ParcelProj + "." + GridID_FieldName
CalcGridField = ParcelGridJoin + "." + Grid_FID
arcpy.CalculateField_management(in_table=ParcelFeatureLayer, field=CalcField, expression="!" + CalcGridField + "!",
                                expression_type="PYTHON3", code_block="")
arcpy.RemoveJoin_management(in_layer_or_view=ParcelFeatureLayer)
ParcelFeatureClass_v1 = "ParcelswGridID_" + dateTag
arcpy.CopyFeatures_management(ParcelFeatureLayer, ParcelFeatureClass_v1)
